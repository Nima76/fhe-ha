#FROM gramineproject/gramine:v1.5
FROM nvidia/cuda:12.4.0-devel-ubuntu22.04

RUN apt update && apt install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt-get upgrade -y
RUN DEBIAN_FRONTEND=noninteractive apt install -y python3.9-distutils
RUN DEBIAN_FRONTEND=noninteractive apt install -y python3.9 python3.9-dev make && apt install -y python3-pip

# Set the working directory for OpenFHE installation inside the container
WORKDIR /usr/src/app

# Install necessary dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    autoconf \
    cmake \
    git \
    g++ \
    make \
    libboost-all-dev

# Clone the accelerated OpenFHE from UNIMAN
WORKDIR /usr/src/app
RUN git clone https://github.com/beehive-lab/openfhe-uniman.git
WORKDIR openfhe-uniman
RUN git switch gpu-cuda
RUN which nvcc

# Build and install OpenFHE
#WORKDIR /usr/src/app/openfhe-development
RUN mkdir build && cd build && cmake \
-DWITH_CUDA=ON -DCUDA_PATH=/usr/local/cuda -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc .. \
&& make \
&& make install 

# Set the library path
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# GUI
ENV TERM xterm-256color
RUN echo 'export PS1="\[\e[36m\](docker@\h) \[\e[1;33m\][\[\e[38;5;130m\]\$(date +%H:%M:%S)\[\e[38;5;167m\] \u:\[\e[38;5;228m\] \w\[\e[1;33m\]]\[\e[m\]\n$ "' > /root/.bashrc

WORKDIR /

ENV PPT="fhe"
# Common folder
ENV PPT_DIR="/fhe-fintech"
# Folder that contains the computation script and resources
ENV SRC_DIR="${PPT_DIR}/app" 
# File where we save the compuation result
ENV RESULT_DIR="${SRC_DIR}/results" 
# File where we save the compuation ID
ENV COMPUTATION_ID_FILE="${SRC_DIR}/computation_ID.txt"
# Folder where we save the upladed files
ENV DATA_DIR="${SRC_DIR}/data"
# MongoDB computation document ID
ENV COMPUTATION_ID="test"

COPY . ${PPT_DIR}
RUN chmod +x ${PPT_DIR}/wrapper.py
RUN ls -la ${PPT_DIR}

RUN python3.9 -m pip install -r "${PPT_DIR}/requirements.txt"
#RUN python3.9 -m pip install -r "${SRC_DIR}/requirements.txt"

#RUN touch ${RESULT_FILE} ${COMPUTATION_ID_FILE}

#These 2 mkdir lines must be active in the real ENCRYPT framework
#RUN mkdir ${SRC_DIR}
RUN mkdir ${DATA_DIR}
RUN mkdir ${RESULT_DIR}
#RUN mkdir ${SRC_DIR}/demoData

WORKDIR ${SRC_DIR}

# make per creazione manifest di gramine
#RUN make SGX=1

EXPOSE 9443

CMD ["sh", "-c", "python3.9 /fhe-fintech/wrapper.py"]
